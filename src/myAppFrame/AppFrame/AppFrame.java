/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package myAppFrame.AppFrame;

import java.io.*;
import java.util.*;

/**
 *
 * @author slacker
 */
public class AppFrame extends javax.swing.JFrame {

    /**
     * Creates new form AppFrame
     */
    private int RECSIZ;
    private int NORECS;
    private int NOFLDS;
    private int[] fieldwidths;
    private String header;
    private String[] fmtstr;

    public AppFrame() {
        initComponents();
        initFields();
    }

    private void initFields() {
        MenuArea.setText("working");
        try {
            // String filename = "D:\\textfiles\\csv\\us-500.csv";
            // String filename = "D:\\textfiles\\csv\\world.csv";
            // String filename = "us-500.csv";
            // String filename = "/home/slacker/textfiles/csv/great.csv";
            String filename = "uk-500.csv";

            File csvfile = new File(filename);
            FileReader fr = new FileReader(csvfile);
            BufferedReader br = new BufferedReader(fr);

            header = br.readLine();
            NOFLDS = csv.countFields(header);
            fieldwidths = new int[NOFLDS];
            NORECS = 0;
            if (NOFLDS < 1 || NOFLDS > 25) {
                System.exit(1);
            }
            String record;
            while ((record = br.readLine()) != null) {
                ++NORECS;
                for (int fldno = 1; fldno <= NOFLDS; fldno++) {
                    String field = csv.getField(record, fldno);
                    int currlen = field.length();
                    if (currlen > fieldwidths[fldno - 1]) {
                        fieldwidths[fldno - 1] = currlen;
                    }
                }
            }

            br.close();
            fr.close();

            // compute necessary flat/direct access file length
            int s = 0;
            for (int fldno = 1; fldno <= NOFLDS; fldno++) {
                s += fieldwidths[fldno - 1];
            }
            RECSIZ = s;

            // construct format strings for field formatting
            fmtstr = new String[NOFLDS];
            for (int fldno = 1; fldno <= NOFLDS; fldno++) {
                fmtstr[fldno - 1] = "%-" + fieldwidths[fldno - 1] + "s";
            }

            // read csv records and write flat records to direct access file
            csvfile = new File(filename);
            fr = new FileReader(csvfile);
            br = new BufferedReader(fr);
            File directfile = new File("direct.dat");
            FileOutputStream fos = new FileOutputStream(directfile);
            BufferedOutputStream bos = new BufferedOutputStream(fos);

            String csvrecord = br.readLine();   // eat header record
            while ((csvrecord = br.readLine()) != null) {
                StringBuilder sb = new StringBuilder();
                for (int fldno = 1; fldno <= NOFLDS; fldno++) {
                    String csvfield = csv.getField(csvrecord, fldno);
                    sb.append(String.format(fmtstr[fldno - 1], csvfield));
                }
                byte[] directrecord = sb.toString().getBytes();
                bos.write(directrecord);
            }

            bos.close();
            fos.close();
            br.close();
            fr.close();

            MenuArea.setText("");
            for (int fldno = 1; fldno <= NOFLDS; fldno++) {
                String headerfield = csv.getField(header, fldno);
                MenuArea.append(fldno + " - " + headerfield + "\r\n");
            }
        } catch (IOException ioe) {
            System.exit(1);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        MenuArea = new javax.swing.JTextArea();
        KeysLabel = new javax.swing.JLabel();
        ReportLabel = new javax.swing.JLabel();
        SortLabel = new javax.swing.JLabel();
        TargetLabel = new javax.swing.JLabel();
        KeyField = new javax.swing.JTextField();
        ReportField = new javax.swing.JTextField();
        SortField = new javax.swing.JTextField();
        TargetField = new javax.swing.JTextField();
        ProcessButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ReportArea = new javax.swing.JTextArea();

        jLabel2.setText("jLabel2");

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        MenuArea.setEditable(false);
        MenuArea.setColumns(20);
        MenuArea.setRows(5);
        jScrollPane1.setViewportView(MenuArea);

        KeysLabel.setText("key fields: ");

        ReportLabel.setText("report fields: ");

        SortLabel.setText("sort fields: ");

        TargetLabel.setText("target: ");

        ProcessButton.setText("process");
        ProcessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProcessButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ReportLabel)
                    .addComponent(SortLabel)
                    .addComponent(TargetLabel)
                    .addComponent(KeysLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(KeyField)
                            .addComponent(ReportField)
                            .addComponent(SortField))
                        .addGap(257, 257, 257))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TargetField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ProcessButton))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(KeysLabel)
                            .addComponent(KeyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ReportLabel)
                            .addComponent(ReportField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SortLabel)
                            .addComponent(SortField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TargetLabel)
                            .addComponent(TargetField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ProcessButton)
                        .addGap(22, 22, 22))))
        );

        ReportArea.setEditable(false);
        ReportArea.setColumns(20);
        ReportArea.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        ReportArea.setRows(5);
        jScrollPane2.setViewportView(ReportArea);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 696, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ProcessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProcessButtonActionPerformed
        // TODO add your handling code here:
        ReportArea.setText("working");
        try {
            ReportArea.setText("");

            // process key field choices
            String keystr = KeyField.getText();
            ArrayList<Integer> keyfields = new ArrayList();
            Scanner sc = new Scanner(keystr);
            while (sc.hasNextInt()) {
                int fldno = sc.nextInt();
                if (fldno < 1 || fldno > NOFLDS) {
                    continue;
                }
                keyfields.add(fldno);
            }
            int nokeys = keyfields.size();

            // process report field choices
            String reportstr = ReportField.getText();
            ArrayList<Integer> reportfields = new ArrayList();
            sc = new Scanner(reportstr);
            while (sc.hasNextInt()) {
                int fldno = sc.nextInt();
                if (fldno < 1 || fldno > NOFLDS) {
                    continue;
                }
                reportfields.add(fldno);
            }
            int nrf = reportfields.size();

            // process order field choices
            String orderstr = SortField.getText();
            ArrayList<Integer> orderfields = new ArrayList();
            sc = new Scanner(orderstr);
            while (sc.hasNextInt()) {
                int fldno = sc.nextInt();
                if (fldno < 1 || fldno > NOFLDS) {
                    continue;
                }
                orderfields.add(fldno);
            }


            // process target choice
            String target = TargetField.getText();

            // build header and separator rows
            StringBuilder hr = new StringBuilder();
            StringBuilder ul = new StringBuilder();
            for (int i = 0; i < nrf; i++) {
                hr.append("|");
                ul.append("|");
                int fldno = reportfields.get(i);
                String headerfield = csv.getField(header, fldno);
                headerfield = String.format(fmtstr[fldno - 1], headerfield);
                hr.append(headerfield.substring(0, fieldwidths[fldno - 1]));
                for (int j = 0; j < fieldwidths[fldno - 1]; j++) {
                    ul.append("_");
                }
            }

            // read key matches from buffered binary input to record map
            File directfile = new File("direct.dat");
            FileInputStream fis = new FileInputStream(directfile);
            BufferedInputStream bis = new BufferedInputStream(fis);

            ArrayList<Integer> matches = new ArrayList<Integer>();
            byte buf[] = new byte[RECSIZ];
            int recno = 0;
            while (bis.read(buf) != -1) {
                ++recno;
                StringBuilder key = new StringBuilder();
                for (int j = 0; j < nokeys; j++) {
                    String str = getField(buf, keyfields.get(j)).trim();
                    key.append(str);
                }

                if (key.toString().equals(target) == true) {
                    matches.add(recno);
                }
            }

            bis.close();
            fis.close();

            // now read the matches
            ArrayList<String> report = new ArrayList();
            Map<String, Integer> idx = new TreeMap();
            RandomAccessFile direct = new RandomAccessFile("direct.dat", "r");
            for (int i = 0; i < matches.size(); i++) {
                recno = matches.get(i);
                int pos = (recno - 1) * RECSIZ;
                direct.seek(pos);
                byte[] directrecord = new byte[RECSIZ];
                direct.read(directrecord);
                StringBuilder row = new StringBuilder();
                for (int j = 0; j < nrf; j++) {
                    String column = "|" + getField(directrecord,
                            reportfields.get(j));
                    row.append(column);
                }
                report.add(row.toString() + "|\r\n");
                StringBuilder comparator = new StringBuilder();
                int nof = orderfields.size();
                if (nof > 0) {
                    for (int j = 0; j < nof; j++) {
                        comparator.append(getField(directrecord, 
                                orderfields.get(j)).trim());
                    }
                    idx.put(comparator.toString(), i);
                }
            }
            
            direct.close();
            matches.clear();
            
            // now finally dump the final report
            ReportArea.append(hr.toString() + "|\r\n");
            ReportArea.append(ul.toString() + "|\r\n");
            if (orderfields.size() == 0) {
                for (int i = 0; i < report.size(); i++) {
                    ReportArea.append(report.get(i));
                }
            } else {
                for (String comparator : idx.keySet()) {
                    recno = idx.get(comparator);
                    ReportArea.append(report.get(recno));
                }
            }
            ReportArea.append("no. of rows = " + report.size());
            report.clear();
        } catch (IOException ioe) {
            System.exit(1);
        }
    }//GEN-LAST:event_ProcessButtonActionPerformed

    private String getField(byte[] buf, int n) {
        int pos = 0;
        for (int i = 0; i < n - 1; i++) {
            pos += fieldwidths[i];
        }
        return new String(buf, pos, fieldwidths[n - 1]);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField KeyField;
    private javax.swing.JLabel KeysLabel;
    private javax.swing.JTextArea MenuArea;
    private javax.swing.JButton ProcessButton;
    private javax.swing.JTextArea ReportArea;
    private javax.swing.JTextField ReportField;
    private javax.swing.JLabel ReportLabel;
    private javax.swing.JTextField SortField;
    private javax.swing.JLabel SortLabel;
    private javax.swing.JTextField TargetField;
    private javax.swing.JLabel TargetLabel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
